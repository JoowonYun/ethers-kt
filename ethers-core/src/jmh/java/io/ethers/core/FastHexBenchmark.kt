package io.ethers.core

import org.openjdk.jmh.annotations.Benchmark
import org.openjdk.jmh.annotations.BenchmarkMode
import org.openjdk.jmh.annotations.Fork
import org.openjdk.jmh.annotations.Mode
import org.openjdk.jmh.annotations.OutputTimeUnit
import org.openjdk.jmh.infra.Blackhole
import org.openjdk.jmh.profile.GCProfiler
import org.openjdk.jmh.runner.Runner
import org.openjdk.jmh.runner.options.OptionsBuilder
import java.util.concurrent.TimeUnit

@Fork(value = 1)
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
open class FastHexBenchmark {
    @Benchmark
    fun decodeHexString(bh: Blackhole) {
        bh.consume(FastHex.decode(DATA_HEX_STRING))
    }

    @Benchmark
    fun encodeWithPrefixBytes(bh: Blackhole) {
        bh.consume(FastHex.encodeWithPrefix(DATA_BYTES_DECODED))
    }

    companion object {
        private const val DATA_HEX_STRING =
            "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063351fb4781461003b57806338270cd314610064575b600080fd5b61004e610049366004610c78565b610087565b60405161005b9190610edb565b60405180910390f35b610077610072366004610cb6565b610356565b60405161005b9493929190610f0a565b606060008373ffffffffffffffffffffffffffffffffffffffff16635339c296846040518263ffffffff1660e01b81526004016100c49190610eee565b60206040518083038186803b1580156100dc57600080fd5b505afa1580156100f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101149190610e5b565b90506000805b61010081101561013e576001811b831615610136576001909101905b60010161011a565b5060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf9190610ce3565b90508167ffffffffffffffff811180156101d857600080fd5b5060405190808252806020026020018201604052801561021257816020015b6101ff610c11565b8152602001906001900390816101f75790505b50935060005b61010081101561034c576001811b841615610344576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600187900b60020b60081b8201830290600090819073ffffffffffffffffffffffffffffffffffffffff8b169063f30dba9390610294908690600401610efc565b6101006040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190610d1e565b5050505050509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508887600190039750878151811061033557fe5b60200260200101819052505050505b600101610218565b5050505092915050565b600080600060608573ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190610d04565b91508573ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561042357600080fd5b505afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190610dc4565b5050604080517fd0c93a7c000000000000000000000000000000000000000000000000000000008152905195995093975060009473ffffffffffffffffffffffffffffffffffffffff8c169463d0c93a7c9450600480820194506020935090829003018186803b1580156104ce57600080fd5b505afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610ce3565b905060006105148583610ba4565b90506000878201825b8160010b8160010b1215610603576040517f5339c29600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c29690610580908590600401610eee565b60206040518083038186803b15801561059857600080fd5b505afa1580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190610e5b565b905060005b6101008110156105f9576001811b8216156105f1576001909401935b6001016105d5565b505060010161051d565b50508782037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83015b8160010b8160010b12610730576040517f5339c29600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c2969061068e908590600401610eee565b60206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190610e5b565b905060005b610100811015610707576001811b8216156106ff576001909401935b6001016106e3565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161062c565b508167ffffffffffffffff8111801561074857600080fd5b5060405190808252806020026020018201604052801561078257816020015b61076f610c11565b8152602001906001900390816107675790505b50945050818801825b8160010b8160010b121561096d576040517f5339c29600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c296906107ee908590600401610eee565b60206040518083038186803b15801561080657600080fd5b505afa15801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190610e5b565b905060005b610100811015610963576001811b821661085c5761095b565b6000878260088660010b60020b901b010290506000808f73ffffffffffffffffffffffffffffffffffffffff1663f30dba93846040518263ffffffff1660e01b81526004016108ab9190610efc565b6101006040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190610d1e565b5050505050509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508b89600190039950898151811061094c57fe5b60200260200101819052505050505b600101610843565b505060010161078b565b50508782037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83015b8160010b8160010b12610b96576040517f5339c29600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c296906109f8908590600401610eee565b60206040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190610e5b565b905060005b610100811015610b6d576001811b8216610a6657610b65565b6000878260088660010b60020b901b010290506000808f73ffffffffffffffffffffffffffffffffffffffff1663f30dba93846040518263ffffffff1660e01b8152600401610ab59190610efc565b6101006040518083038186803b158015610ace57600080fd5b505afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190610d1e565b5050505050509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508b896001900399508981518110610b5657fe5b60200260200101819052505050505b600101610a4d565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610996565b505050505092959194509250565b600060088260020b8460020b81610bb757fe5b0560020b901d905060008360020b128015610be357508160020b8360020b81610bdc57fe5b0760020b15155b15610c0b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b92915050565b604080516060810182526000808252602082018190529181019190915290565b80518015158114610c4157600080fd5b919050565b8051600281900b8114610c4157600080fd5b80516fffffffffffffffffffffffffffffffff81168114610c4157600080fd5b60008060408385031215610c8a578182fd5b8235610c9581610f64565b91506020830135600181900b8114610cab578182fd5b809150509250929050565b60008060408385031215610cc8578182fd5b8235610cd381610f64565b91506020830135610cab81610f89565b600060208284031215610cf4578081fd5b610cfd82610c46565b9392505050565b600060208284031215610d15578081fd5b610cfd82610c58565b600080600080600080600080610100898b031215610d3a578384fd5b610d4389610c58565b9750602089015180600f0b8114610d58578485fd5b80975050604089015195506060890151945060808901518060060b8114610d7d578485fd5b60a08a0151909450610d8e81610f64565b60c08a015190935063ffffffff81168114610da7578283fd5b9150610db560e08a01610c31565b90509295985092959890939650565b600080600080600080600060e0888a031215610dde578283fd5b8751610de981610f64565b9650610df760208901610c46565b95506040880151610e0781610f89565b6060890151909550610e1881610f89565b6080890151909450610e2981610f89565b60a089015190935060ff81168114610e3f578283fd5b9150610e4d60c08901610c31565b905092959891949750929550565b600060208284031215610e6c578081fd5b5051919050565b6000815180845260208085019450808401835b83811015610ed0578151805160020b885283810151600f0b848901526040908101516fffffffffffffffffffffffffffffffff169088015260609096019590820190600101610e86565b509495945050505050565b600060208252610cfd6020830184610e73565b60019190910b815260200190565b60029190910b815260200190565b600073ffffffffffffffffffffffffffffffffffffffff861682528460020b60208301526fffffffffffffffffffffffffffffffff8416604083015260806060830152610f5a6080830184610e73565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f8657600080fd5b50565b61ffff81168114610f8657600080fdfea164736f6c6343000706000a"
        private val DATA_BYTES_DECODED = FastHex.decode(DATA_HEX_STRING)

        @JvmStatic
        fun main(args: Array<String>) {
            val options = OptionsBuilder()
                .include(FastHexBenchmark::class.java.simpleName)
                .addProfiler(GCProfiler::class.java)
                .warmupIterations(3)
                .measurementIterations(3)
                .build()

            Runner(options).run()
        }
    }
}
